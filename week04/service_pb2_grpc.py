# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import service_pb2 as service__pb2


class UnicornServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReverseText = channel.unary_unary(
                '/UnicornService/ReverseText',
                request_serializer=service__pb2.TextReq.SerializeToString,
                response_deserializer=service__pb2.TextRep.FromString,
                )
        self.SplitText = channel.unary_unary(
                '/UnicornService/SplitText',
                request_serializer=service__pb2.SplitTextReq.SerializeToString,
                response_deserializer=service__pb2.SplitTextRep.FromString,
                )
        self.IsPrime = channel.stream_stream(
                '/UnicornService/IsPrime',
                request_serializer=service__pb2.NumberReq.SerializeToString,
                response_deserializer=service__pb2.NumberRep.FromString,
                )


class UnicornServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReverseText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SplitText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsPrime(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UnicornServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReverseText': grpc.unary_unary_rpc_method_handler(
                    servicer.ReverseText,
                    request_deserializer=service__pb2.TextReq.FromString,
                    response_serializer=service__pb2.TextRep.SerializeToString,
            ),
            'SplitText': grpc.unary_unary_rpc_method_handler(
                    servicer.SplitText,
                    request_deserializer=service__pb2.SplitTextReq.FromString,
                    response_serializer=service__pb2.SplitTextRep.SerializeToString,
            ),
            'IsPrime': grpc.stream_stream_rpc_method_handler(
                    servicer.IsPrime,
                    request_deserializer=service__pb2.NumberReq.FromString,
                    response_serializer=service__pb2.NumberRep.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UnicornService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UnicornService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReverseText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UnicornService/ReverseText',
            service__pb2.TextReq.SerializeToString,
            service__pb2.TextRep.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SplitText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UnicornService/SplitText',
            service__pb2.SplitTextReq.SerializeToString,
            service__pb2.SplitTextRep.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsPrime(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/UnicornService/IsPrime',
            service__pb2.NumberReq.SerializeToString,
            service__pb2.NumberRep.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
